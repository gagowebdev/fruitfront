import { useEffect, useState, useRef } from 'react';
import { io, Socket } from 'socket.io-client';
import api from '../api/axiosInstance';
import { toast } from 'react-toastify';
import ProgressBar from '../components/ProgressBar';
import 'react-toastify/dist/ReactToastify.css';
import GameCoinIcon from '../assets/icons/gamecoin.svg';

type StoreItem = {
  id: number;
  name: string;
  type: string;
  price: number;
  multiplier: number | null;
  bonus: number | null;
  duration: number | null;
};

// üî• –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–∫–∏–Ω–æ–≤ (—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)
const skins = [
  { id: 1, url: '/skins/skin1.png' },
  { id: 2, url: '/skins/skin2.png' },
  { id: 3, url: '/skins/skin3.png' },
  { id: 4, url: '/skins/skin5.png' },
  { id: 5, url: '/skins/skin6.png' },
  { id: 6, url: '/skins/skin8.png' },
  // { id: 7, url: '/skins/skin8.png' },
];

function GamePage() {
  const [gameBalance, setGameBalance] = useState(0);
  const [level, setLevel] = useState(1);
  const [clicks, setClicks] = useState(0);
  const [skinId, setSkinId] = useState(1);
  const [storeItems, setStoreItems] = useState<StoreItem[]>([]);
  const [userId, setUserId] = useState<number | null>(null);
  const socketRef = useRef<Socket | null>(null);
  const [floatingNumbers, setFloatingNumbers] = useState<{ id: number; value: number }[]>([]);


  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Å–∫–∏–Ω–∞ –ø–æ skinId
  const skinUrl = skins.find(skin => skin.id === skinId)?.url || '/skins/skin1.png';

  // –§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞ –∫–ª–∏–∫–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
  const clicksForLevel = (lvl: number) => Math.floor(100 * Math.pow(1.3, lvl - 1));
  const prevClicksToNextLevel = level > 1 ? clicksForLevel(level - 1) : 0;
  const clicksToNextLevel = clicksForLevel(level);

  // ‚úÖ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const progress = Math.min(((clicks - prevClicksToNextLevel) / (clicksToNextLevel - prevClicksToNextLevel)) * 100, 100);


  useEffect(() => {
    if (!socketRef.current) {
      // socketRef.current = io('https://fruitqwest.onrender.com', {
      socketRef.current = io('http://localhost:3000', {
        auth: { userId: localStorage.getItem('userId') },
      });

      socketRef.current.on('game_balance_update', (data: { gameBalance: number; clickValue: number }) => {
        setGameBalance(data.gameBalance);
      
        // üî• –ê–Ω–∏–º–∞—Ü–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ —á–∏—Å–ª–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º `clickValue`
        const newNumber = { id: Date.now(), value: data.clickValue };
        setFloatingNumbers(prev => [...prev, newNumber]);
      
        // –£–¥–∞–ª—è–µ–º —á–∏—Å–ª–æ —á–µ—Ä–µ–∑ 500ms
        setTimeout(() => {
          setFloatingNumbers(prev => prev.filter(num => num.id !== newNumber.id));
        }, 500);
      });
      
      socketRef.current.on('level_up', (data: { level: number; gameBalance: number; bonus: number }) => {
        setLevel(data.level);
        setGameBalance(data.gameBalance);
        toast.success(`üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${data.level} üèÜ\nüí∞ –ë–æ–Ω—É—Å: +${data.bonus}`, { autoClose: 3000 });
      });
      socketRef.current.on('error', (error) => console.error('‚ùå WebSocket –û—à–∏–±–∫–∞:', error));
    }

    const fetchData = async () => {
      try {
        const response = await api.get('/users/me');
        setGameBalance(response.data.gameBalance);
        setUserId(response.data.id);
        setLevel(response.data.level);
        setClicks(response.data.clicks);
        setSkinId(response.data.skinId);

        const storeResponse = await api.get('/store/items');
        setStoreItems(storeResponse.data);

        socketRef.current?.emit('subscribe', { userId: response.data.id });
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    };

    fetchData();

    return () => {
      socketRef.current?.disconnect();
      socketRef.current = null;
    };
  }, []);


  const handleClick = () => {
    if (userId) {
      socketRef.current?.emit('click', { userId });
      setClicks(prevClicks => prevClicks + 1);
    }
  };
  
  
  
  

  const handleBuyItem = async (item: StoreItem) => {
    if (gameBalance < item.price) {
      toast.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
      return;
    }

    try {
      const response = await api.post('/store/buy', { itemId: item.id });
      toast.success(`üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞: ${response.data.message}`);

      if (item.type === 'SKIN') {
        setSkinId(item.id);
      }

      setGameBalance(prev => prev - item.price);
    } catch (error: any) {
      toast.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ: ${error.response?.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
  };

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const allSkins = storeItems.filter(item => item.type === 'SKIN'); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∫–∏–Ω—ã
  const currentSkinIndex = allSkins.findIndex(item => item.id === skinId); // –ò—â–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∏–Ω–∞
  const nextSkin = allSkins[currentSkinIndex + 1] || null; // –°–ª–µ–¥—É—é—â–∏–π —Å–∫–∏–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
  
  
  const skinsCategory = allSkins.filter(item => item.id === skinId || (nextSkin && item.id === nextSkin.id));


  // const skinsCategory = storeItems.filter(item => item.type === 'SKIN' && (item.id === skinId || item.id === skinId + 1));
  const multipliersCategory = storeItems.filter(item => item.type === 'MULTIPLIER');
  const referralBoostsCategory = storeItems.filter(item => item.type === 'REFERRAL_LIMIT_BOOST');

  function formatNumber(value: number | string): string {
    return (Number(value)) // –£–±–∏—Ä–∞–µ–º .00
      .toLocaleString('ru-RU') // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
      .replace(',', '.'); // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
  }
  
  return (
    <div className="game-container">
      <div className="balance-container">
        <h1><img src={GameCoinIcon} alt="" /> {formatNumber(gameBalance)}</h1>

        {/* üî• –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —á–∏—Å–ª–∞ */}
        {floatingNumbers.map(num => (
          <div key={num.id} className="floating-number">{`+${num.value}`}</div>
        ))}
      </div>


      <div className="level-info">
        <div>
          <p>{formatNumber(clicks)} / {formatNumber(clicksToNextLevel)}</p>
          <p>–£—Ä–æ–≤–µ–Ω—å {level}</p>
        </div>
        <ProgressBar progress={progress} />
      </div>

      <div className="clicker">
        <img src={skinUrl} alt="–ò–≥—Ä–æ–≤–æ–π —Å–∫–∏–Ω" onClick={handleClick} />
      </div>

      {/* –ú–∞–≥–∞–∑–∏–Ω */}
      <div className="shop">
        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –°–∫–∏–Ω—ã */}
        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –°–∫–∏–Ω—ã */}
<div className="shop-category skins">
  <h3>–°–∫–∏–Ω—ã</h3>
  <div className="shop-items">
    {skinsCategory.map(item => {
      const skin = skins.find(s => s.id === item.id);
      return (
        <button key={item.id} className={`shop-item ${item.id === skinId ? 'owned' : 'next'}`} onClick={() => handleBuyItem(item)} disabled={item.id === skinId}>
          <img src={skin?.url} alt={item.name} className="shop-skin-img" />
          <p>X{item.multiplier}</p>
          {!(item.type === 'SKIN' && item.id === skinId) && (
            <div className='price'><img src={GameCoinIcon} alt="" />{formatNumber(item.price)}</div>
          )}
        </button>
      );
    })}
  </div>
</div>

{/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –ë—É—Å—Ç–µ—Ä—ã */}
<div className="shop-category multipliers">
  <h3>–ë—É—Å—Ç–µ—Ä—ã</h3>
  <div className="shop-items">
    {multipliersCategory.map(item => (
      <button key={item.id} className="shop-item" onClick={() => handleBuyItem(item)}>
        <p className='multiplier'>X{item.multiplier}</p>
        <p className='name'>{item.name}</p>
        <p className='price'><img src={GameCoinIcon} alt="" />{formatNumber(item.price)}</p>
      </button>
    ))}
  </div>
</div>

{/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è: –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã */}
<div className="shop-category referral-boosts">
  <h3>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã</h3>
  <div className="shop-items">
    {referralBoostsCategory.map(item => (
      <button key={item.id} className="shop-item" onClick={() => handleBuyItem(item)}>
        <p className='percent'>{item.bonus}%</p>
        <p className='percent-label'>–ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –ª–∏–º–∏—Ç—É</p>
        <p className='price'><img src={GameCoinIcon} alt="" />{formatNumber(item.price)}</p>
      </button>
    ))}
  </div>
</div>


      </div>
    </div>
  );
}

export default GamePage;
